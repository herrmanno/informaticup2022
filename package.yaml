name:                informaticup2022
version:             0.1.0.0
github:              "herrmanno/informaticup2022"
license:             BSD3
author:              "Oliver Herrmann"
maintainer:          "o.herrmann92@gmail.com"
copyright:           "Oliver Herrmann 2021"

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/herrmanno/informaticup2022#readme>

dependencies:
- base >= 4.7 && < 5
- containers
- heap
- lens
- transformers

default-extensions:
- ImportQualifiedPost
- TypeApplications
- TupleSections
- NamedFieldPuns
- FlexibleInstances
- MultiParamTypeClasses
- TypeFamilies
- RankNTypes
- TemplateHaskell
- GeneralizedNewtypeDeriving

library:
  source-dirs: src

executables:
  informaticup2022-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options: &exe-ghc-options
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    # For details on warnings: https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html
    # This list taken from https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
    # Enable all warnings with -Weverything, then disable the ones we don’t care about
    - -Weverything
    - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
    - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
    - -Wno-missed-specialisations # When GHC can’t specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
    - -Wno-all-missed-specialisations # See missed-specialisations
    - -Wno-unsafe # Don’t use Safe Haskell warnings
    - -Wno-safe # Don’t use Safe Haskell warnings
    - -Wno-missing-local-signatures # Warning for polymorphic local bindings; nothing wrong with those.
    - -Wno-monomorphism-restriction # Don’t warn if the monomorphism restriction is used
    - -Wno-implicit-prelude # Dont' warn on implicit Prelude import
    - -Wno-missing-safe-haskell-mode
    - -Wno-missing-deriving-strategies # Dont' enforce explitic deriving strategy
    dependencies:
    - informaticup2022

tests:
  informaticup2022-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options: *exe-ghc-options
    # - -threaded
    # - -rtsopts
    # - -with-rtsopts=-N
    dependencies:
    - informaticup2022
    - hspec
